/*
 * $Id: etype.h,v 1.46 2010/08/23 08:40:04 ryo Exp $
 *
 * ETYPE: Global function type definitions for MicroEMACS 3.9
 *
 * written by Daniel Lawrence based on code by Dave G. Conroy, Steve Wilhite and
 * George Jones
 */

/* ALL global fuction declarations */

BUFFER *bfind(char *, int, int);
char *bytecopy(char *, char *, int);
void chomp(char *);
char *complete(char *, char *, int, int);
int envnum(void);
char *envval(int);
char *fixnull(char *);
char *flook(char *, int);
BUFFER *getcbuf(char *, char *, int);
char *getclabel(void);
char *getctext(void);
BUFFER *getdefb(void);
char *getfname(KEYTAB *);
int getvar(char *, char *, int);
char *getreg(void);
char *getval(char *);
char *gtenv(char *);
char *gtfilename(char *);
char *gtusr(char *);
char *int_asc(int);
char *int_hex(int, int);
char *ltos(int);
char *makename(char *, char *);
char *mklower(char *);
char *mkupper(char *);
char *namval(int);
char *timeset(void);
char *token(char *, char *, int);
char *transbind(char *);
void *(*fncmatch(char *))(int, int);
void *(*getname(char *))(int, int);
int absv(int);
int amatch(MC *, int, LINE **, int *);
int bell(int, int);
int biteq(int, BITMAP);
int boundry(LINE *, int, int);
int cclmake(char **, MC *);
int checknext(int, char *, int);
int desfunc(int, int);
int desvars(int, int);
int dispvar(int, int);
int echochar(int, int);
int eq(int, int);
int ernd(void);
int execkey(KEYTAB *, int, int);
int fbound(int, LINE **, int *, int);
int fexist(char *);
int fisearch(int, int);
int getkey(void);
int gettyp(char *);
int getwpos(void);
int get_char(void);
int match_pat(char *);
int mceq(int, MC *);
int mcscanner(int, int, int);
int mcstr(void);
int nextch(LINE **, int *, int);
int promptpattern(char *);
int readpattern(char *, char[], int, int);
int reglines(void);
int remmark(int, int);
int replaces(int, int, int);
int risearch(int, int);
int scanmore(char *, int);
int scanner(int, int, int);
int setvar(int, int);
int stol(char *);
int svar(VDESC *, char *);
int tgetc(void);
int uneat(void);
LINE *lalloc(int);
int addline(char *);
int adjustmode(int, int);
int anycb(void);
int apro(int, int);
int asc_int(char *);
int backchar(int, int);
int backdel(int, int);
int backhunt(int, int);
int backline(int, int);
int backpage(int, int);
int backsearch(int, int);
int backword(int, int);
int bclear(BUFFER *);
int bindtokey(int, int);
int bktoshell(int, int);
int buildlist(int, char *);
int capword(int, int);
int cex(int, int);
int cec(int, int);
int checkmodify(void);
int cinsert(void);
int clean(void);
int clrmes(int, int);
int cmdstr(int, char *);
int copyregion(int, int);
int ctlxe(int, int);
int ctlxlp(int, int);
int ctlxrp(int, int);
int ctoec(int);
int ctrlg(int, int);
int dcline(int, char **);
int deblank(int, int);
int debug(BUFFER *, char *);
int delbword(int, int);
int delfword(int, int);
int delgmode(int, int);
int delins(int, char *, int);
int delmode(int, int);
int delwind(int, int);
int desbind(int, int);
int deskey(int, int);
int detab(int, int);
int dobuf(BUFFER *);
int docmd(char *);
int dofile(char *);
int ectoc(int);
int edinit(char *);
int editloop(void);
int endword(int, int);
int enlargewind(int, int);
int entab(int, int);
int execbuf(int, int);
int execcmd(int, int);
int execfile(int, int);
int execprg(int, int);
int nowaitexecprg(int, int);
int execproc(int, int);
int execute(int, int, int);
int expandp(char *, char *, int);
int ffclose(void);
int ffgetline(void);
int ffputline(int, BUFFER *, char *, int, int);
int ffropen(char *);
int ffwopen(char *);
int filefind(int, int);
int filename(int, int);
int fileread(int, int);
int filesave(int, int);
int filewrite(int, int);
int fillpara(int, int);
int filter(int, int);
int findvar(char *, VDESC *, int);
int fmatch(char);
int fnclabel(int, int);
int forwchar(int, int);
int forwdel(int, int);
int forwhunt(int, int);
int forwline(int, int);
int forwpage(int, int);
int forwsearch(int, int);
int forwword(int, int);
int freewhile(WHBLOCK *);
int getccol(int);
int getcline(void);
int getcmd(void);
int getfence(int, int);
int getfile(char *, int);
int getgoal(LINE *);
int getregion(REGION *);
int getstring(char *, char *, int, int);
int gotobob(int, int);
int gotobol(int, int);
int gotobop(int, int);
int gotoeob(int, int);
int gotoeol(int, int);
int gotoeop(int, int);
int gotoline(int, int);
int gotomark(int, int);
int help(int, int);
int ifile(char *);
int indent(int, int);
int insbrace(int, int);
int insfile(int, int);
int inspound(void);
int insspace(int, int);
int inword(void);
int isearch(int, int);
int istring(int, int);
int kdelete(void);
int killbuffer(int, int);
int killpara(int, int);
int killregion(int, int);
int killtext(int, int);
int kinsert(char);
int lchange(int);
int ldelete(long, int);
int ldelnewline(void);
int lfree(LINE *);
int linsert(int, char);
int linstr(char *);
int listbuffers(int, int);
int lnewline(void);
int loademp(int, int);
int lover(char *);
int lowerregion(int, int);
int lowerword(int, int);
int lowrite(char);
int macarg(char *);
int macrotokey(int, int);
int makelist(int);
int makelit(char *);
int mcclear(void);
int meexit(int);
int meta(int, int);
int mlerase(void);
int mlforce(char *);
int mlout(int);
int mlputf(int);
int mlputi(int, int);
int mlputs(char *);
int mlreply(char *, char *, int);
int mltreply(char *, char *, int, int);
int mlyesno(char *);
int modeline(WINDOW *);
int movecursor(int, int);
int movecursor_num(int, int);
int mvdnwind(int, int);
int mvupwind(int, int);
int namebuffer(int, int);
int namedcmd(int, int);
int narrow(int, int);
int newline(int, int);
int newsize(int, int);
int newwidth(int, int);
int nextarg(char *, char *, int, int);
int nextbuffer(int, int);
int nextdown(int, int);
int nextup(int, int);
int nextwind(int, int);
int nullproc(int, int);
int onlywind(int, int);
int openline(int, int);
int outstring0(char *);
int outstring(char *);
int ovstring(int, int);
int pipecmd(int, int);
int prevwind(int, int);
int putclabel(char *);
int putctext(char *);
int qreplace(int, int);
int quickexit(int, int);
int quit(int, int);
int quote(int, int);
int rdonly(void);
int readin(char *, int);
int reform(char *);
int reframe(WINDOW *);
int refresh(int, int);
int reposition(int, int);
int resetkey(void);
int resize(int, int);
int resterr(void);
int restwnd(int, int);
int rmcclear(void);
int rmcstr(void);
int rvstrcpy(char *, char *);
int savematch(void);
int savewnd(int, int);
int setbit(int, BITMAP);
int setccol(int);
int setekey(int, int);
int setfillcol(int, int);
int setgmode(int, int);
int setjtable(void);
int setmark(int, int);
int setmod(int, int);
int showcpos(int, int);
int shrinkwind(int, int);
int spal(char *);
int spawn(int, int);
int spawncli(int, int);
int splitwind(int, int);
int sreplace(int, int);
int startup(char *);
int storekeyword(int, int);
int storeproc(int, int);
int strinc(char *, char *);
int swapmark(int, int);
int swbuffer(BUFFER *);
int tab(int, int);
int trim(int, int);
int ttclose(void);
int ttflush(void);
int tthaveinput(void);
int ttgetc(void);
int ttopen(void);
int ttputc(unsigned char);
int twiddle(int, int);
int typahead(void);
int unarg(int, int);
int unbindchar(int);
int unbindkey(int, int);
int unmark(int, int);
int unqname(char *);
int updall(WINDOW *);
int update(int);
void update_line_context_all(BUFFER *);
int upddex(void);
int updext(void);
int updgar(void);
int updone(WINDOW *);
int updpos(void);
int updupd(int);
int upmode(void);
int upperregion(int, int);
int upperword(int, int);
int upscreen(int, int);
int upwind(void);
int usebuffer(int, int);
int varclean(void);
int varinit(void);
int viewfile(int, int);
int vteeol(void);
int vtfree(void);
int vtinit(void);
int vtmove(int, int);
int vtputc(int, unsigned int, int, int);
int vttidy(void);
int wcom(int, int);
int widen(int, int);
int wordcount(int, int);
int wrapword(int, int);
int writemsg(int, int);
int writeout(char *);
int yank(int, int);
int zotbuf(BUFFER *);
unsigned int chcase(unsigned int);
unsigned int getckey(int);
unsigned int stock(char *);
KEYTAB *getbind(int);
WINDOW *wpopup(void);

int binary(char *, char *(*)(int), int);

#if COMPLET
char *getffile(char *);
char *getnfile(char *);
#endif

char upperc(char);
char lowerc(char);

#if MAGIC
BITMAP clearbits(void);
#endif

int mlwrite(char *,...);

/* unix.c */
int isdir(char *);
int is_writable(char *);
int filecopy(char *, char *);
int write_inode_think(char *, char *);
int getwindow_lines(void);
int getwindow_columns(void);

/* crypt.c */
void p_crypt(char *, unsigned int);

/* tcap.c */
int tcapiste(void);
int tcapclose(void);
int putpad(char *);
int get1key(void);

/* kanji.c */
int chkana(unsigned char);
int chctype(unsigned char);
int nthctype(unsigned char *, int);
int nptrctype(unsigned char *, unsigned char *);
int zentohanword(int, int);
int hantozenword(int, int);

int exechook(char *);

void uppercase(char *);
void lowercase(char *);

#if RAMSIZE
void *allocate(unsigned long);
void *reallocate(void *, unsigned long);
void release(void *);
#if RAMSHOW
void dspram(void);
#endif
#endif
